<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vgt-saga-orders</name>
    </assembly>
    <members>
        <member name="T:vgt_saga_orders.Orchestrator.Orchestrator">
            <summary>
                Saga Orchestrator;
                handles all saga transactions of user orders.
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Constructor of the Orchestrator class.
                Initializes Orchestrator object.
                Creates, initializes and opens connections to the database and rabbitmq
                based on configuration data present and handled by specified handling objects.
                Throws propagated exceptions if the configuration data is nowhere to be found.
            </summary>
            <param name="config">Configuration with the connection params</param>
            <exception cref="T:System.ArgumentException">Which variable is missing in the configuration</exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">Couldn't establish connection with
                RabbitMQ
            </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.SagaRepliesEventHandler(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
                Event Handler that hooks to the event of the queue consumer.
                Handles incoming replies from the RabbitMQ and routes them to the appropriate tasks.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.CreateChannels">
            <summary>
                Creates async channels to send received messages with to the tasks handling them.
                Channels are stored in the dictionary MessageType - Channel
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.RepliesQueueHandler">
            <summary>
                Class handling RabbitMQ connections, messages and events;
                all concerning SAGA transactions with an orchestrator.
                Configuration data needed for this class is as follows.
                <p>
                    <list type="bullet">
                        <listheader>
                            <term>Rabbit connection:</term>
                        </listheader>
                        <item>
                            <term>RABBIT_HOST</term>
                            <description>- Address of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_VIRT_HOST</term>
                            <description>- Virtual host of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_PORT</term>
                            <description>- Port of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_USR</term>
                            <description>- Username to login with.</description>
                        </item>
                        <item>
                            <term>RABBIT_PASSWORD</term>
                            <description>- User password to login with.</description>
                        </item>
                    </list>
                    and
                    <list type="bullet">
                        <listheader>
                            <term>Queue names:</term>
                        </listheader>
                        <item>
                            <term>RABBIT_REPLIES</term>
                            <description>- Queue of the replies sent back to the orchestrator.</description>
                        </item>
                        <item>
                            <term>RABBIT_ORDER</term>
                            <description>- Queue of the requests sent by the orchestrator to the order service.
                            </description>
                        </item>
                        <item>
                            <term>RABBIT_PAYMENT</term>
                            <description>- Queue of the requests sent by the orchestrator to the payment gate service.
                            </description>
                        </item>
                        <item>
                            <term>RABBIT_HOTEL</term>
                            <description>- Queue of the requests sent by the orchestrator to the hotel service.
                            </description>
                        </item>
                        <item>
                            <term>RABBIT_FLIGHT</term>
                            <description>- Queue of the requests sent by the orchestrator to the flight service.
                            </description>
                        </item>
                    </list>
                </p>
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,NLog.Logger)">
            <summary>
                Constructor of the RabbitMQ handling class.
                Initializes RabbitMQ handling object.
                Creates connection string/factory based on configuration data present
                with exceptions thrown if the data is nowhere to be found.
            </summary>
            <param name="config">Configuration with the connection params</param>
            <param name="log">logger to log to</param>
            <exception cref="T:System.ArgumentException">Which variable is missing in the configuration</exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">Couldn't establish connection
            </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishTagResponse(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean)">
            <summary>
                Handles RabbitMQ message tag and posts the acceptance or rejection,
            </summary>
            <param name="ea">tag to answer</param>
            <param name="state">ack/reject</param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.AddRepliesConsumer(System.EventHandler{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
                Create queue consumer and hook to the event specifying incoming replies.
            </summary>
            <param name="handler">handler to assign to the consumer event</param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.GetQueuesFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Get the list of all saga queues defined in the configuration.
                Logs, Creates and Throws ArgumentError if a queue name is not present.
            </summary>
            <param name="config">Configuration to take the values from</param>
            <returns>List of queue names</returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.GetConnectionFactoryFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Creates connection factory to the RabbitMQ
                based on the data specified in the configuration file or env variables
            </summary>
            <param name="config">Configuration to use</param>
            <returns>ConnectionFactory with specified connection params</returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.ThrowException``1(System.String)">
            <summary>
                Logs, creates and throws the exception that the specified variable is not present in the config
            </summary>
            <param name="argument">Variable not present</param>
            <typeparam name="T">type to "return"</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.OrderQueueHandler">
            <summary>
                Class handling RabbitMQ connections, messages and events;
                all concerning SAGA transactions with an orchestrator.
                Configuration data needed for this class is as follows.
                <p>
                    <list type="bullet">
                        <listheader>
                            <term>Rabbit connection:</term>
                        </listheader>
                        <item>
                            <term>RABBIT_HOST</term>
                            <description>- Address of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_VIRT_HOST</term>
                            <description>- Virtual host of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_PORT</term>
                            <description>- Port of the rabbit server.</description>
                        </item>
                        <item>
                            <term>RABBIT_USR</term>
                            <description>- Username to login with.</description>
                        </item>
                        <item>
                            <term>RABBIT_PASSWORD</term>
                            <description>- User password to login with.</description>
                        </item>
                    </list>
                    and
                    <list type="bullet">
                        <listheader>
                            <term>Queue names:</term>
                        </listheader>
                        <item>
                            <term>RABBIT_REPLIES</term>
                            <description>- Queue of the replies sent back to the orchestrator.</description>
                        </item>
                        <item>
                            <term>RABBIT_ORDER</term>
                            <description>- Queue of the requests sent by the orchestrator to the order service.
                            </description>
                        </item>
                    </list>
                </p>
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,NLog.Logger)">
            <summary>
                Constructor of the RabbitMQ handling class.
                Initializes RabbitMQ handling object.
                Creates connection string/factory based on configuration data present
                with exceptions thrown if the data is nowhere to be found.
            </summary>
            <param name="config">Configuration with the connection params</param>
            <param name="log">logger to log to</param>
            <exception cref="T:System.ArgumentException">Which variable is missing in the configuration</exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">Couldn't establish connection
            </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.PublishTagResponse(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean)">
            <summary>
                Handles RabbitMQ message tag and posts the acceptance or rejection,
            </summary>
            <param name="ea">tag to answer</param>
            <param name="state">ack/reject</param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.AddRepliesConsumer(System.EventHandler{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
                Create queue consumer and hook to the event specifying incoming requests.
            </summary>
            <param name="handler">handler to assign to the consumer event</param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.GetQueuesFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Get the list of all saga queues defined in the configuration.
                Logs, Creates and Throws ArgumentError if a queue name is not present.
            </summary>
            <param name="config">Configuration to take the values from</param>
            <returns>List of queue names</returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.GetConnectionFactoryFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Creates connection factory to the RabbitMQ
                based on the data specified in the configuration file or env variables
            </summary>
            <param name="config">Configuration to use</param>
            <returns>ConnectionFactory with specified connection params</returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.ThrowException``1(System.String)">
            <summary>
                Logs, creates and throws the exception that the specified variable is not present in the config
            </summary>
            <param name="argument">Variable not present</param>
            <typeparam name="T">type to "return"</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Which variable is missing</exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.OrderQueueHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.OrderService.OrderService">
            <summary>
                Saga Orchestrator;
                handles all saga transactions of user orders.
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Constructor of the OrderService class.
                Initializes OrderService object.
                Creates, initializes and opens connections to the database and rabbitmq
                based on configuration data present and handled by specified handling objects.
                Throws propagated exceptions if the configuration data is nowhere to be found.
            </summary>
            <param name="config">Configuration with the connection params</param>
            <exception cref="T:System.ArgumentException">Which variable is missing in the configuration</exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">Couldn't establish connection with
                RabbitMQ
            </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.SagaOrdersEventHandler(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
                Event Handler that hooks to the event of the queue consumer.
                Handles incoming replies from the RabbitMQ and routes them to the appropriate tasks.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.CreateChannels">
            <summary>
                Creates async channels to send received messages with to the tasks handling them.
                Channels are stored in the dictionary MessageType - Channel
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_serialization.Message">
            <summary>
                Main message template of the SAGA messages
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.TransactionId">
            <summary>
                A unique identifier that spans the whole transaction
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.MessageId">
            <summary>
                A unique identifier per message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.Source">
            <summary>
                The name of the service that is sending the message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.CreationDate">
            <summary>
                The creation date of the message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.MessageType">
            <summary>
                A message type used by producers/consumers to identify events and commands
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.Body">
            <summary>
                Body of the command of type specified in MessageType
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageType">
            <summary>
                Implemented message type bodies
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.OrderRequest">
            <summary>
                body type of the requests incoming to the Order microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.OrderReply">
            <summary>
                body type of the replies incoming from the Order microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.PaymentRequest">
            <summary>
                body type of the requests incoming to the Payment microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.PaymentReply">
            <summary>
                body type of the requests incoming from the Payment microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.HotelRequest">
            <summary>
                body type of the requests incoming to the Hotel microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.HotelReply">
            <summary>
                body type of the requests incoming from the Hotel microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.FlightRequest">
            <summary>
                body type of the requests incoming to the Flight microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.FlightReply">
            <summary>
                body type of the requests incoming from the Flight microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.Invalid">
            <summary>
                specifies that the message is invalid
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.SagaJsonConverter">
            <summary>
                Converter class used to differentiate between implemented types of the message body.
                Serializes and deserializes json to and from the targeted record structs.
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Deserializes json to targeted MessageBody
            </summary>
            <inheritdoc/>
            <returns>IMessageBody of the appropriate type</returns>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_serialization.Utils">
            <summary>
                Util class for the SAGA messages serialization handling.
                Util offers deserialization and serialization of the JSON messages to the appropriate types of the
                messages.
                Uses custom JsonConverter.
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.Utils.#ctor(NLog.Logger)">
            <summary>
                Default constructor for the Utils class.
                Utils object specifies the appropriate logger for the operations.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:vgt_saga_serialization.Utils.Deserialize(System.Byte[])">
            <summary>
                Deserializes JSON written in bytes from the RabbitMQ to the Saga Message struct
                with targeted and appropriate MessageBody of the specified Type.
            </summary>
            <param name="body">Json in bytes to deserialize</param>
            <returns>null if invalid otherwise deserialized Saga Message</returns>
        </member>
        <member name="M:vgt_saga_serialization.Utils.Serialize(vgt_saga_serialization.Message)">
            <summary>
                Serializes SAGA Message struct to a string JSON
            </summary>
            <param name="message">Saga Message struct to serialize</param>
            <returns>string containing JSON</returns>
        </member>
    </members>
</doc>
